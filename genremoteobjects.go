package main

import (
   "fmt"
   "github.com/network4all/mydb"
   "github.com/network4all/configuration"
   "github.com/network4all/logerror"
   "time"
   "unicode"
   "strings"
   "strconv"
   "os"
   "flag"
)

const (
   ws = "%s"
)

var conf configuration.Settings
var reservedWords map[string]string

func main() {

   flag.Usage = usage
   flag.Parse()

   args := flag.Args()

   if len(args) < 2 {
      fmt.Println("port/wspath is missing.")
      os.Exit(1);
   }

   port := args[0]
   wspath := args[1]
   dbconfigpath := args[2]

   //reinit db
   configuration.LoadsettingsPfn(&conf, dbconfigpath)
   mydb.InitConfigSettings(conf)

   currenttime := time.Now().Local()

   reservedWords = map[string]string {
      "id": "1",
      "enabled": "1",
      "lastupdate": "1",
   }

   fmt.Printf("package main\n\n")

   fmt.Printf("// DOC: generated by db2object generator on %s\n\n", currenttime.Format("2006-01-02 15:04:05 +0800"))
   // import
   fmt.Printf("// import\n")
   fmt.Printf("import (\n")
   fmt.Printf("   \"encoding/json\"\n")
   fmt.Printf("   \"strconv\"\n")
   fmt.Printf("   \"strings\"\n")
   fmt.Printf("   \"log\"\n")
   fmt.Printf("   \"net/http\"\n")
   fmt.Printf("   \"net/url\"\n")
   fmt.Printf("   \"github.com/gorilla/mux\"\n")
   fmt.Printf("   \"github.com/network4all/mydb\"\n")
   fmt.Printf("   \"github.com/network4all/configuration\"\n")
   fmt.Printf("   n \"./dbobjects\"\n")
   fmt.Printf(")\n\n")

   fmt.Printf("var conf configuration.Settings\n")
   fmt.Printf("\n")
   fmt.Printf("func init () {\n")
   fmt.Printf("   log.Printf(\"Preparing webserver\\n\")\n")
   fmt.Printf("   configuration.LoadsettingsPfn (&conf,\"%s\")\n", dbconfigpath)
   fmt.Printf("   mydb.InitConfigSettings(conf)\n")
   fmt.Printf("}\n")

   fmt.Printf("// our main function\n")
   fmt.Printf("func main() {\n")
   fmt.Printf("   router := mux.NewRouter()\n")

   genHandleFuncs(wspath)

   fmt.Printf("    // error handling & start server\n")
   fmt.Printf("   router.HandleFunc(\"/\",Error404)\n")
   fmt.Printf("   log.Printf(\"Starting webserver on port %s\")\n", port)
   fmt.Printf("   log.Fatal(http.ListenAndServe(\":%s\", router))\n", port)
   fmt.Printf("}\n")
   fmt.Printf("\n")
   fmt.Printf("func Error404 (w http.ResponseWriter, r *http.Request) {\n")
   fmt.Printf("\n")
   fmt.Printf("   params := mux.Vars(r)\n")
   fmt.Printf("   log.Printf(\"%s/404: %%s %%s params='%%v'\\n\", r.Method, r.RequestURI, params,)\n", port)
   fmt.Printf("\n")
   fmt.Printf("}\n\n")

   // structs
   // genStruct()
   genFunctions()

   close()
}

func usage() {
    fmt.Fprintf(os.Stderr, "usage: myprog webserverport\n")
    flag.PrintDefaults()
    os.Exit(2)
}

func genHandleFuncs(wspath string) {
   fmt.Printf("\n\n")
   queryTables := fmt.Sprintf("SHOW TABLES")
   rowTables, err := mydb.DB.Query(queryTables)
   logerror.CheckErr(err)

   // for each table
   for rowTables.Next() {
      var tablename string
      err = rowTables.Scan(&tablename)
      logerror.CheckErr(err)
      genMux(tablename, wspath)
   }
}

func genMux (tablename string, wspath string) {

   childName := createSingleObjectName(tablename)

   fmt.Printf("   // %s\n", tablename)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/load/{filter}\",     Load%ss           ).Methods(\"GET\")\n",      wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/loadid/{id}\",       Load%sbyId        ).Methods(\"GET\")\n",      wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/cnt/{filter}\",      %sCount           ).Methods(\"GET\")\n",      wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/getid/{filter}\",    Get%sId           ).Methods(\"GET\")\n",      wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/save/\",             %sSave            ).Methods(\"POST\")\n",     wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/update/\",           %sUpdate          ).Methods(\"POST\")\n",     wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/disable/\",          %sDisable         ).Methods(\"POST\")\n",     wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/enable/\",           %sEnable          ).Methods(\"POST\")\n",     wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/collision/\",        %sCollision       ).Methods(\"POST\")\n",     wspath, childName, childName)
   fmt.Printf("   router.HandleFunc(\"/ws/%s/%s/drop/\",             %sTruncate        ).Methods(\"DELETE\")\n\n", wspath, childName, childName)
}


func genFunctions() {
   queryTables := fmt.Sprintf("SHOW TABLES")
   rowTables, err := mydb.DB.Query(queryTables)
   logerror.CheckErr(err)

   // for each table
   for rowTables.Next() {
      var tablename string
      err = rowTables.Scan(&tablename)
      logerror.CheckErr(err)
      genTransactions(tablename)
   }
}

func genTransactions(tablename string) {

   childName := createSingleObjectName(tablename)
   collection := createCollectionName(tablename)

   fmt.Printf("// --------------------------------------------\n")
   fmt.Printf("// table      : %s\n", tablename)
   fmt.Printf("// object     : %s\n", childName)
   fmt.Printf("// collection : %s\n\n", collection)

   fmt.Printf("func Load%s (w http.ResponseWriter, r *http.Request) {\n", collection)
   fmt.Printf("\n")
   fmt.Printf("   params := mux.Vars(r)\n")
   fmt.Printf("   filter := params[\"filter\"]\n")
   fmt.Printf("   filter = strings.Replace(filter, \"%%BF\",\"%%2F\", -1)\n")
   fmt.Printf("   filter, _ = url.QueryUnescape(filter)\n")
   fmt.Printf("   var dummy []n.%s\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   n.Load%s(&dummy, filter)\n", collection)
   fmt.Printf("   json.NewEncoder(w).Encode(dummy)\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func Load%sbyId (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   params := mux.Vars(r)\n")
   fmt.Printf("   id, _ := strconv.Atoi(params[\"id\"])\n")
   fmt.Printf("   dummy := n.Load%sbyId(id)\n", childName)
   fmt.Printf("   json.NewEncoder(w).Encode(dummy)\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func %sCount (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   params := mux.Vars(r)\n")
   fmt.Printf("   filter := params[\"filter\"]\n")
   fmt.Printf("   filter = strings.Replace(filter, \"%%BF\",\"%%2F\", -1)\n")
   fmt.Printf("   filter, _ = url.QueryUnescape(filter)\n")
   fmt.Printf("   cnt := n.%sCount(filter)\n", childName)
   fmt.Printf("   json.NewEncoder(w).Encode(cnt)\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func Get%sId (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   params := mux.Vars(r)\n")
   fmt.Printf("   filter := params[\"filter\"]\n")
   fmt.Printf("   filter = strings.Replace(filter, \"%%BF\",\"%%2F\", -1)\n")
   fmt.Printf("   filter, _ = url.QueryUnescape(filter)\n")
   fmt.Printf("   id := n.Get%sId(filter)\n", childName)
   fmt.Printf("   json.NewEncoder(w).Encode(id)\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func %sSave (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   var dummy n.%s\n", childName)
   fmt.Printf("   _ = json.NewDecoder(r.Body).Decode(&dummy)\n")
   fmt.Printf("   dummy.Save()\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func %sUpdate (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   var dummy n.%s\n", childName)
   fmt.Printf("   _ = json.NewDecoder(r.Body).Decode(&dummy)\n")
   fmt.Printf("   dummy.Update()\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func %sDisable (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n\n")
   fmt.Printf("   var dummy n.%s\n", childName)
   fmt.Printf("   _ = json.NewDecoder(r.Body).Decode(&dummy)\n")
   fmt.Printf("   dummy.Disable()\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func %sEnable (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   var dummy n.%s\n", childName)
   fmt.Printf("   _ = json.NewDecoder(r.Body).Decode(&dummy)\n")
   fmt.Printf("   dummy.Enable()\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func %sCollision (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   var dummy n.%s\n", childName)
   fmt.Printf("   _ = json.NewDecoder(r.Body).Decode(&dummy)\n")
   fmt.Printf("   retvalue:= dummy.Checkcollision()\n")
   fmt.Printf("   json.NewEncoder(w).Encode(retvalue)\n")
   fmt.Printf("}\n\n")

   fmt.Printf("func %sTruncate (w http.ResponseWriter, r *http.Request) {\n", childName)
   fmt.Printf("\n")
   fmt.Printf("   n.Truncate%sTable()\n", collection)
   fmt.Printf("}\n\n")
}

// helpers
func createSingleObjectName(tablename string) string {

   tablename = strings.ToLower(tablename)

   // should be warnings for these types:
   if (tablename=="switch") {tablename = "myswitch"}
   if (tablename=="interface") {tablename = "myinterfaces"}
   if _, err := strconv.Atoi(string([]rune(tablename)[0])); err == nil {
        //numeric
        tablename="my" + tablename
   }

   tablename = TrimSuffix(tablename,"s")

   for i, v := range tablename {
      return string(unicode.ToUpper(v)) + tablename[i+1:]
    }
    return ""
}

func createCollectionName(tablename string) string {

        return createSingleObjectName(tablename) + "s"
}

func FirstLetterUpcase(s string) string {
   for i, v := range s {
      return string(unicode.ToUpper(v)) + s[i+1:]
   }
   return ""
}

func init() {
   // load settings & open database
   configuration.Loadsettings (&conf)
   mydb.InitConfigSettings(conf)
}

func close() {
   // close db
   mydb.Close()
}

func TrimSuffix(s, suffix string) string {
    if strings.HasSuffix(s, suffix) {
        s = s[:len(s)-len(suffix)]
    }
    return s
}
